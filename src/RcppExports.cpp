// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// set_omp_threads
void set_omp_threads(int n);
RcppExport SEXP rFTRLProximal_set_omp_threads(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    set_omp_threads(n);
    return R_NilValue;
END_RCPP
}
// get_omp_threads
int get_omp_threads();
RcppExport SEXP rFTRLProximal_get_omp_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_omp_threads());
    return rcpp_result_gen;
END_RCPP
}
// predict_spMatrix
arma::vec predict_spMatrix(const S4& x, const arma::vec& w, const std::string family);
RcppExport SEXP rFTRLProximal_predict_spMatrix(SEXP xSEXP, SEXP wSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const S4& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::string >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(predict_spMatrix(x, w, family));
    return rcpp_result_gen;
END_RCPP
}
// FTRLProx_train_spMatrix
List FTRLProx_train_spMatrix(const S4& x, const arma::vec& y, const Nullable<List>& state, const std::string family, const List params, int epoch, int nthread, bool verbose);
RcppExport SEXP rFTRLProximal_FTRLProx_train_spMatrix(SEXP xSEXP, SEXP ySEXP, SEXP stateSEXP, SEXP familySEXP, SEXP paramsSEXP, SEXP epochSEXP, SEXP nthreadSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const S4& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Nullable<List>& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< const List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type epoch(epochSEXP);
    Rcpp::traits::input_parameter< int >::type nthread(nthreadSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(FTRLProx_train_spMatrix(x, y, state, family, params, epoch, nthread, verbose));
    return rcpp_result_gen;
END_RCPP
}
